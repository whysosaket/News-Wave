// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

const baseURL = "http://localhost:9000";

interface News {
  _id: string
  title: string
  text: string
  subject: string
  date: string
}

interface NewsApiResponse {
  success: boolean
  news: News[]
  currentPage: number
  totalPages: number
  totalItems: number
}

export interface NewsPostData {
  model: string;
  text: string;
}

export interface NewsPostResponse {
  success: boolean;
  prediction: boolean;
}

// Define a service using a base URL and expected endpoints
export const newsApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: baseURL }),
  reducerPath: "newsAPI",
  // Tag types are used for caching and invalidation.
  tagTypes: ["News"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getNews: build.query<NewsApiResponse, number>({
      query: (page=1) => `/api/news?page=${page}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      // providesTags: (result, error, id) => [{ type: "News", id: "LIST" }],
    }),
    postNews: build.mutation<NewsPostResponse, NewsPostData>({
      query: (newNewsItem={model: "LR", text: ""}) => ({
        url: `/api/news`,
        method: 'POST',
        body: newNewsItem,
      }),
      // Invalidates the 'News' tag to update the news list when a new news item is posted
      invalidatesTags: [{ type: 'News', id: 'LIST' }],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetNewsQuery, usePostNewsMutation } = newsApiSlice
export type { News as NewsInterface, NewsPostData as Prediction }